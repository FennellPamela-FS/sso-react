{
  "version": 3,
  "sources": ["../../../../app/routes/watches/actions.tsx"],
  "sourcesContent": ["import type { ActionArgs, MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\n\nexport const meta: MetaFunction = () => ({\n  title: \"Actions Demo\",\n});\n\n// When your form sends a POST, the action is called on the server.\n// - https://remix.run/route/action\n// - https://remix.run/guides/data-updates\nexport const action = async ({ request }: ActionArgs) => {\n  const formData = await request.formData();\n  const answer = formData.get(\"answer\");\n\n  // Typical action workflows start with validating the form data that just came\n  // over the network. Clientside validation is fine, but you definitely need it\n  // server side.  If there's a problem, return the data and the component can\n  // render it.\n  if (!answer || typeof answer !== \"string\") {\n    return json(\"Come on, at least try!\", { status: 400 });\n  }\n\n  if (answer !== \"egg\") {\n    return json(`Sorry, ${answer} is not right.`, { status: 400 });\n  }\n\n  // Finally, if the data is valid, you'll typically write to a database or send or\n  // email or log the user in, etc. It's recommended to redirect after a\n  // successful action, even if it's to the same place so that non-JavaScript workflows\n  // from the browser doesn't repost the data if the user clicks back.\n  return redirect(\"/demos/correct\");\n};\n\nexport default function ActionsDemo() {\n  // https://remix.run/hooks/use-action-data\n  const actionMessage = useActionData<typeof action>();\n  const answerRef = useRef<HTMLInputElement>(null);\n\n  // This form works without JavaScript, but when we have JavaScript we can make\n  // the experience better by selecting the input on wrong answers! Go ahead, disable\n  // JavaScript in your browser and see what happens.\n  useEffect(() => {\n    if (actionMessage && answerRef.current) {\n      answerRef.current.select();\n    }\n  }, [actionMessage]);\n\n  return (\n    <div className=\"remix__page\">\n      <main>\n        <h2>Actions!</h2>\n        <p>\n          This form submission will send a post request that we handle in our\n          `action` export. Any route can export an action to handle data\n          mutations.\n        </p>\n        <Form method=\"post\" className=\"remix__form\">\n          <h3>Post an Action</h3>\n          <p>\n            <i>What is more useful when it is broken?</i>\n          </p>\n          <label>\n            <div>Answer:</div>\n            <input ref={answerRef} name=\"answer\" type=\"text\" />\n          </label>\n          <div>\n            <button>Answer!</button>\n          </div>\n          {actionMessage ? (\n            <p>\n              <b>{actionMessage}</b>\n            </p>\n          ) : null}\n        </Form>\n      </main>\n\n      <aside>\n        <h3>Additional Resources</h3>\n        <ul>\n          <li>\n            Guide:{\" \"}\n            <a href=\"https://remix.run/guides/data-writes\">Data Writes</a>\n          </li>\n          <li>\n            API:{\" \"}\n            <a href=\"https://remix.run/route/action\">Route Action Export</a>\n          </li>\n          <li>\n            API:{\" \"}\n            <a href=\"https://remix.run/hooks/use-action-data\">\n              <code>useActionData</code>\n            </a>\n          </li>\n        </ul>\n      </aside>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;AAEA;AACA,IAAAA,gBAAkC;AAiD1B;AA/CD,IAAM,OAAqB,OAAO;AAAA,EACvC,OAAO;AACT;AA4Be,SAAR,cAA+B;AAEpC,QAAM,gBAAgB,cAA6B;AACnD,QAAM,gBAAY,sBAAyB,IAAI;AAK/C,+BAAU,MAAM;AACd,QAAI,iBAAiB,UAAU,SAAS;AACtC,gBAAU,QAAQ,OAAO;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,aAAa,CAAC;AAElB,SACE,mDAAC,SAAI,WAAU,eACb;AAAA,uDAAC,UACC;AAAA,yDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,mDAAC,OAAE,6JAAH;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,QAAK,QAAO,QAAO,WAAU,eAC5B;AAAA,2DAAC,QAAG,8BAAJ;AAAA;AAAA;AAAA;AAAA,eAAkB;AAAA,QAClB,mDAAC,OACC,6DAAC,OAAE,sDAAH;AAAA;AAAA;AAAA;AAAA,eAAyC,KAD3C;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WACC;AAAA,6DAAC,SAAI,uBAAL;AAAA;AAAA;AAAA;AAAA,iBAAY;AAAA,UACZ,mDAAC,WAAM,KAAK,WAAW,MAAK,UAAS,MAAK,UAA1C;AAAA;AAAA;AAAA;AAAA,iBAAiD;AAAA,aAFnD;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,SACC,6DAAC,YAAO,uBAAR;AAAA;AAAA;AAAA;AAAA,eAAe,KADjB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACC,gBACC,mDAAC,OACC,6DAAC,OAAG,2BAAJ;AAAA;AAAA;AAAA;AAAA,eAAkB,KADpB;AAAA;AAAA;AAAA;AAAA,eAEA,IACE;AAAA,WAhBN;AAAA;AAAA;AAAA;AAAA,aAiBA;AAAA,SAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,IAEA,mDAAC,WACC;AAAA,yDAAC,QAAG,oCAAJ;AAAA;AAAA;AAAA;AAAA,aAAwB;AAAA,MACxB,mDAAC,QACC;AAAA,2DAAC,QAAG;AAAA;AAAA,UACK;AAAA,UACP,mDAAC,OAAE,MAAK,wCAAuC,2BAA/C;AAAA;AAAA;AAAA;AAAA,iBAA0D;AAAA,aAF5D;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,QAAG;AAAA;AAAA,UACG;AAAA,UACL,mDAAC,OAAE,MAAK,kCAAiC,mCAAzC;AAAA;AAAA;AAAA;AAAA,iBAA4D;AAAA,aAF9D;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,QAAG;AAAA;AAAA,UACG;AAAA,UACL,mDAAC,OAAE,MAAK,2CACN,6DAAC,UAAK,6BAAN;AAAA;AAAA;AAAA;AAAA,iBAAmB,KADrB;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,SAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,OA9CF;AAAA;AAAA;AAAA;AAAA,SA+CA;AAEJ;",
  "names": ["import_react"]
}
