{
  "version": 3,
  "sources": ["../../../../../app/routes/watches/params/$id.tsx"],
  "sourcesContent": ["import type { LoaderArgs, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useCatch, useLoaderData } from \"@remix-run/react\";\n\n// The `$` in route filenames becomes a pattern that's parsed from the URL and\n// passed to your loaders so you can look up data.\n// - https://remix.run/route/loader#params\nexport const loader = async ({ params }: LoaderArgs) => {\n  // pretend like we're using params.id to look something up in the db\n\n  if (params.id === \"this-record-does-not-exist\") {\n    // If the record doesn't exist we can't render the route normally, so\n    // instead we throw a 404 response to stop running code here and show the\n    // user the catch boundary.\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  // now pretend like the record exists but the user just isn't authorized to\n  // see it.\n  if (params.id === \"shh-its-a-secret\") {\n    // Again, we can't render the component if the user isn't authorized. You\n    // can even put data in the response that might help the user rectify the\n    // issue! Like emailing the webmaster for access to the page. (Oh, right,\n    // `json` is just a Response helper that makes it easier to send JSON\n    // responses).\n    throw json({ webmasterEmail: \"hello@remix.run\" }, { status: 401 });\n  }\n\n  // Sometimes your code just blows up and you never anticipated it. Remix will\n  // automatically catch it and send the UI to the error boundary.\n  if (params.id === \"kaboom\") {\n    lol();\n  }\n\n  // but otherwise the record was found, user has access, so we can do whatever\n  // else we needed to in the loader and return the data. (This is boring, we're\n  // just gonna return the params.id).\n  return json({ param: params.id });\n};\n\nexport default function ParamDemo() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <h1>\n      The param is <i style={{ color: \"red\" }}>{data.param}</i>\n    </h1>\n  );\n}\n\n// https://remix.run/route/catch-boundary\n// https://remix.run/hooks/use-catch\n// https://remix.run/guides/not-found\nexport function CatchBoundary() {\n  const caught = useCatch();\n\n  let message: React.ReactNode;\n  switch (caught.status) {\n    case 401:\n      message = (\n        <p>\n          Looks like you tried to visit a page that you do not have access to.\n          Maybe ask the webmaster ({caught.data.webmasterEmail}) for access.\n        </p>\n      );\n      break;\n    case 404:\n      message = (\n        <p>Looks like you tried to visit a page that does not exist.</p>\n      );\n      break;\n    default:\n      message = (\n        <p>\n          There was a problem with your request!\n          <br />\n          {caught.status} {caught.statusText}\n        </p>\n      );\n      break;\n  }\n\n  return (\n    <>\n      <h2>Oops!</h2>\n      <p>{message}</p>\n      <p>\n        (Isn't it cool that the user gets to stay in context and try a different\n        link in the parts of the UI that didn't blow up?)\n      </p>\n    </>\n  );\n}\n\n// https://remix.run/route/error-boundary\n// https://remix.run/guides/not-found\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <>\n      <h2>Error!</h2>\n      <p>{error.message}</p>\n      <p>\n        (Isn't it cool that the user gets to stay in context and try a different\n        link in the parts of the UI that didn't blow up?)\n      </p>\n    </>\n  );\n}\n\nexport const meta: MetaFunction = ({ data }) => {\n  return {\n    title: data ? `Param: ${data.param}` : \"Oops...\",\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;AAEA;AA0CmB;AAJJ,SAAR,YAA6B;AAClC,QAAM,OAAO,cAA6B;AAC1C,SACE,mDAAC,QAAG;AAAA;AAAA,IACW,mDAAC,OAAE,OAAO,EAAE,OAAO,MAAM,GAAI,eAAK,SAAlC;AAAA;AAAA;AAAA;AAAA,WAAwC;AAAA,OADvD;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAKO,SAAS,gBAAgB;AAC9B,QAAM,SAAS,SAAS;AAExB,MAAI;AACJ,UAAQ,OAAO,QAAQ;AAAA,IACrB,KAAK;AACH,gBACE,mDAAC,OAAE;AAAA;AAAA,QAEyB,OAAO,KAAK;AAAA,QAAe;AAAA,WAFvD;AAAA;AAAA;AAAA;AAAA,aAGA;AAEF;AAAA,IACF,KAAK;AACH,gBACE,mDAAC,OAAE,yEAAH;AAAA;AAAA;AAAA;AAAA,aAA4D;AAE9D;AAAA,IACF;AACE,gBACE,mDAAC,OAAE;AAAA;AAAA,QAED,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,QACH,OAAO;AAAA,QAAO;AAAA,QAAE,OAAO;AAAA,WAH1B;AAAA;AAAA;AAAA;AAAA,aAIA;AAEF;AAAA,EACJ;AAEA,SACE,sFACE;AAAA,uDAAC,QAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,WAAS;AAAA,IACT,mDAAC,OAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,OAAE,0IAAH;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,OANF;AAAA;AAAA;AAAA;AAAA,SAOA;AAEJ;AAIO,SAAS,cAAc,EAAE,MAAM,GAAqB;AACzD,UAAQ,MAAM,KAAK;AACnB,SACE,sFACE;AAAA,uDAAC,QAAG,sBAAJ;AAAA;AAAA;AAAA;AAAA,WAAU;AAAA,IACV,mDAAC,OAAG,gBAAM,WAAV;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IAClB,mDAAC,OAAE,0IAAH;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,OANF;AAAA;AAAA;AAAA;AAAA,SAOA;AAEJ;AAEO,IAAM,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC9C,SAAO;AAAA,IACL,OAAO,OAAO,UAAU,KAAK,UAAU;AAAA,EACzC;AACF;",
  "names": []
}
